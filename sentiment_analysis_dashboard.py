# -*- coding: utf-8 -*-
"""Sentiment Analysis Dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lxiP-yepa8kaq6-a1EtxV43S6_Bid9jm

# Task
Analyze the sentiment of movie reviews from the dataset located at "/content/drive/MyDrive/movie_reviews.csv", visualize the sentiment distribution, and build a Streamlit dashboard to display the results and allow interactive sentiment analysis of user-provided text.

## Load data

### Subtask:
Load the movie reviews dataset from the specified path into a pandas DataFrame.

**Reasoning**:
Import pandas and load the dataset into a DataFrame.
"""

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/movie_reviews.csv')
df.head()

"""## Perform sentiment analysis

### Subtask:
Use a suitable NLP library (like TextBlob or VADER) to classify the sentiment of each review (Positive, Negative, Neutral).

**Reasoning**:
The subtask requires classifying sentiment using an NLP library. TextBlob is a suitable choice for this, and the necessary functions can be applied to the 'review' column to get polarity scores and then classify them into 'Positive', 'Negative', or 'Neutral' based on defined thresholds.
"""

from textblob import TextBlob

def classify_sentiment(score):
    if score > 0.1:
        return 'Positive'
    elif score < -0.1:
        return 'Negative'
    else:
        return 'Neutral'

df['sentiment_score'] = df['review'].apply(lambda x: TextBlob(x).sentiment.polarity)
df['predicted_sentiment'] = df['sentiment_score'].apply(classify_sentiment)
df.head()

"""## Visualize sentiment distribution

### Subtask:
Create plots (e.g., pie chart or bar chart) to visualize the distribution of sentiment labels.

**Reasoning**:
Count the occurrences of each predicted sentiment and visualize the distribution using a bar chart with appropriate labels and title.
"""

import matplotlib.pyplot as plt

sentiment_counts = df['predicted_sentiment'].value_counts()

plt.figure(figsize=(8, 6))
sentiment_counts.plot(kind='bar', color=['skyblue', 'lightcoral', 'lightgreen'])
plt.title('Distribution of Predicted Sentiment')
plt.xlabel('Sentiment')
plt.ylabel('Number of Reviews')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""## Build streamlit dashboard

### Subtask:
Create a Streamlit application to display the sentiment analysis results and visualizations.

**Reasoning**:
Import the necessary libraries for creating the Streamlit application and load the dataframe.
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/movie_reviews.csv')

from textblob import TextBlob

def classify_sentiment(score):
    if score > 0.1:
        return 'Positive'
    elif score < -0.1:
        return 'Negative'
    else:
        return 'Neutral'

df['sentiment_score'] = df['review'].apply(lambda x: TextBlob(x).sentiment.polarity)
df['predicted_sentiment'] = df['sentiment_score'].apply(classify_sentiment)

"""**Reasoning**:
Install the missing `streamlit` library to resolve the `ModuleNotFoundError`.


"""

!pip install streamlit

"""**Reasoning**:
Now that Streamlit is installed, create the Streamlit application by setting the title, displaying the dataframe head, and plotting the sentiment distribution.


"""

st.title('Movie Review Sentiment Analysis')

st.write("## Dataset Head")
st.dataframe(df.head())

st.write("## Sentiment Distribution")
sentiment_counts = df['predicted_sentiment'].value_counts()

fig, ax = plt.subplots(figsize=(8, 6))
sentiment_counts.plot(kind='bar', color=['skyblue', 'lightcoral', 'lightgreen'], ax=ax)
ax.set_title('Distribution of Predicted Sentiment')
ax.set_xlabel('Sentiment')
ax.set_ylabel('Number of Reviews')
plt.xticks(rotation=0)
st.pyplot(fig)

"""**Reasoning**:
The previous command failed because the libraries were not imported in the current session. Re-import the necessary libraries and then create the Streamlit application.


"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/movie_reviews.csv')

from textblob import TextBlob

def classify_sentiment(score):
    if score > 0.1:
        return 'Positive'
    elif score < -0.1:
        return 'Negative'
    else:
        return 'Neutral'

df['sentiment_score'] = df['review'].apply(lambda x: TextBlob(x).sentiment.polarity)
df['predicted_sentiment'] = df['sentiment_score'].apply(classify_sentiment)

st.title('Movie Review Sentiment Analysis')

st.write("## Dataset Head")
st.dataframe(df.head())

st.write("## Sentiment Distribution")
sentiment_counts = df['predicted_sentiment'].value_counts()

fig, ax = plt.subplots(figsize=(8, 6))
sentiment_counts.plot(kind='bar', color=['skyblue', 'lightcoral', 'lightgreen'], ax=ax)
ax.set_title('Distribution of Predicted Sentiment')
ax.set_xlabel('Sentiment')
ax.set_ylabel('Number of Reviews')
plt.xticks(rotation=0)
st.pyplot(fig)

"""## Add interactive sentiment analysis

### Subtask:
Implement a feature in the Streamlit app that allows users to input text and get real-time sentiment feedback.

**Reasoning**:
Add a text area for user input, perform sentiment analysis on the input if provided, and display the result.
"""

st.write("## Analyze Your Own Review")
user_input = st.text_area("Enter a movie review:")

if user_input:
    input_sentiment_score = TextBlob(user_input).sentiment.polarity
    input_predicted_sentiment = classify_sentiment(input_sentiment_score)
    st.info(f"Predicted Sentiment: {input_predicted_sentiment}")

"""## Optional: word clouds

### Subtask:
Generate word clouds for each sentiment category to visualize common words.

**Reasoning**:
Generate and display word clouds for each sentiment category.
"""

from wordcloud import WordCloud
import matplotlib.pyplot as plt

sentiments = df['predicted_sentiment'].unique()

for sentiment in sentiments:
    sentiment_reviews = df[df['predicted_sentiment'] == sentiment]['review']
    all_reviews_text = ' '.join(sentiment_reviews)

    wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='viridis').generate(all_reviews_text)

    plt.figure(figsize=(10, 7))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.title(f'Word Cloud for {sentiment} Sentiment', fontsize=16)
    plt.show()

"""## Summary:

### Data Analysis Key Findings

*   The dataset containing movie reviews and their corresponding sentiments was successfully loaded.
*   Sentiment analysis was performed on the reviews using TextBlob, classifying each review as Positive, Negative, or Neutral.
*   A bar chart was generated to visualize the distribution of the predicted sentiments across the dataset.
*   A Streamlit dashboard was built to display the analysis results and includes a feature allowing users to input their own review and receive real-time sentiment analysis feedback.
*   Word clouds were generated for each sentiment category (Positive, Negative, Neutral) to visualize the most frequent words associated with each sentiment.

### Insights or Next Steps

*   The Streamlit dashboard provides a user-friendly interface to interact with the sentiment analysis model and visualize the overall sentiment distribution of the dataset.
*   Analyzing the word clouds for each sentiment can offer insights into the specific vocabulary commonly used in positive, negative, and neutral movie reviews.

"""